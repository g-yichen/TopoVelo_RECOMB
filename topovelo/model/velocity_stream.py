"""
Streamline plotting for 3D vector fields.

"""

import numpy as np

import matplotlib as mpl
from matplotlib import _api, cm, patches
import matplotlib.colors as mcolors
from mpl_toolkits.mplot3d.art3d import Line3D, Line3DCollection, Patch3DCollection
from mpl_toolkits.mplot3d import proj3d

__all__ = ['streamplot']


def streamplot(axes, x, y, z, u, v, w, density=1, linewidth=None, color=None,
               cmap=None, norm=None, arrowsize=1, arrowstyle='-|>',
               minlength=0.1, transform=None, zorder=None, start_points=None,
               maxlength=4.0, integration_direction='both',
               broken_streamlines=True):
    """
    Draw streamlines of a vector flow.

    Parameters
    ----------
    x, y, z : 1D/2D arrays
        Evenly spaced strictly increasing arrays to make a grid.  If 2D, all
        rows of *x* must be equal and all columns of *y* must be equal; i.e.,
        they must be as if generated by ``np.meshgrid(x_1d, y_1d)``.
    u, v, w : 2D arrays
        *x* and *y*-velocities. The number of rows and columns must match
        the length of *y* and *x*, respectively.
    density : float or (float, float)
        Controls the closeness of streamlines. When ``density = 1``, the domain
        is divided into a 30x30 grid. *density* linearly scales this grid.
        Each cell in the grid can have, at most, one traversing streamline.
        For different densities in each direction, use a tuple
        (density_x, density_y).
    linewidth : float or 2D array
        The width of the streamlines. With a 2D array the line width can be
        varied across the grid. The array must have the same shape as *u*
        and *v*.
    color : color or 2D array
        The streamline color. If given an array, its values are converted to
        colors using *cmap* and *norm*.  The array must have the same shape
        as *u* and *v*.
    cmap, norm
        Data normalization and colormapping parameters for *color*; only used
        if *color* is an array of floats. See `~.Axes.imshow` for a detailed
        description.
    arrowsize : float
        Scaling factor for the arrow size.
    arrowstyle : str
        Arrow style specification.
        See `~matplotlib.patches.FancyArrowPatch`.
    minlength : float
        Minimum length of streamline in axes coordinates.
    start_points : (N, 2) array
        Coordinates of starting points for the streamlines in data coordinates
        (the same coordinates as the *x* and *y* arrays).
    zorder : float
        The zorder of the streamlines and arrows.
        Artists with lower zorder values are drawn first.
    maxlength : float
        Maximum length of streamline in axes coordinates.
    integration_direction : {'forward', 'backward', 'both'}, default: 'both'
        Integrate the streamline in forward, backward or both directions.
    data : indexable object, optional
        DATA_PARAMETER_PLACEHOLDER
    broken_streamlines : boolean, default: True
        If False, forces streamlines to continue until they
        leave the plot domain.  If True, they may be terminated if they
        come too close to another streamline.

    Returns
    -------
    StreamplotSet
        Container object with attributes

        - ``lines``: `.LineCollection` of streamlines

        - ``arrows``: `.PatchCollection` containing `.FancyArrowPatch`
          objects representing the arrows half-way along streamlines.

        This container will probably change in the future to allow changes
        to the colormap, alpha, etc. for both lines and arrows, but these
        changes should be backward compatible.
    """
    grid = Grid(x, y, z)
    mask = StreamMask(density)
    dmap = DomainMap(grid, mask)

    if zorder is None:
        zorder = Line3D.zorder

    # default to data coordinates
    if transform is None:
        transform = axes.transData

    if color is None:
        color = axes._get_lines.get_next_color()

    if linewidth is None:
        linewidth = mpl.rcParams['lines.linewidth']

    line_kw = {}
    arrow_kw = dict(arrowstyle=arrowstyle, mutation_scale=10 * arrowsize)

    _api.check_in_list(['both', 'forward', 'backward'],
                       integration_direction=integration_direction)

    if integration_direction == 'both':
        maxlength /= 2.

    use_multicolor_lines = isinstance(color, np.ndarray)
    if use_multicolor_lines:
        if color.shape != grid.shape:
            raise ValueError("If 'color' is given, it must match the shape of "
                             "the (x, y) grid")
        line_colors = [[]]  # Empty entry allows concatenation of zero arrays.
        color = np.ma.masked_invalid(color)
    else:
        line_kw['color'] = color
        arrow_kw['color'] = color

    if isinstance(linewidth, np.ndarray):
        if linewidth.shape != grid.shape:
            raise ValueError("If 'linewidth' is given, it must match the "
                             "shape of the (x, y) grid")
        line_kw['linewidth'] = []
    else:
        line_kw['linewidth'] = linewidth
        arrow_kw['linewidth'] = linewidth

    line_kw['zorder'] = zorder
    arrow_kw['zorder'] = zorder

    # Sanity checks.
    if u.shape != grid.shape or v.shape != grid.shape or w.shape != grid.shape:
        raise ValueError("'u', 'v' and 'w' must match the shape of the (x, y, z) grid")

    u = np.ma.masked_invalid(u)
    v = np.ma.masked_invalid(v)
    w = np.ma.masked_invalid(w)

    integrate = _get_integrator(u, v, w, dmap, minlength, maxlength,
                                integration_direction)

    trajectories = []
    if start_points is None:
        for xm, ym, zm in _gen_starting_points(mask.shape):
            if mask[ym, xm, zm] == 0:
                xg, yg, zg = dmap.mask2grid(xm, ym, zm)
                t = integrate(xg, yg, zg, broken_streamlines)
                if t is not None:
                    trajectories.append(t)
    else:
        sp2 = np.asanyarray(start_points, dtype=float).copy()

        # Check if start_points are outside the data boundaries
        for xs, ys, zs in sp2:
            if not (grid.x_origin <= xs <= grid.x_origin + grid.width and
                    grid.y_origin <= ys <= grid.y_origin + grid.height and 
                    grid.z_origin <= zs <= grid.z_origin + grid.altitude):
                raise ValueError(f"Starting point ({xs}, {ys}) outside of "
                                 "data boundaries")

        # Convert start_points from data to array coords
        # Shift the seed points from the bottom left of the data so that
        # data2grid works properly.
        sp2[:, 0] -= grid.x_origin
        sp2[:, 1] -= grid.y_origin
        sp2[:, 2] -= grid.z_origin

        for xs, ys, zs in sp2:
            xg, yg, zg = dmap.data2grid(xs, ys, zs)
            # Floating point issues can cause xg, yg to be slightly out of
            # bounds for xs, ys on the upper boundaries. Because we have
            # already checked that the starting points are within the original
            # grid, clip the xg, yg to the grid to work around this issue
            xg = np.clip(xg, 0, grid.nx - 1)
            yg = np.clip(yg, 0, grid.ny - 1)
            zg = np.clip(zg, 0, grid.nz - 1)

            t = integrate(xg, yg, zg, broken_streamlines)
            if t is not None:
                trajectories.append(t)

    if use_multicolor_lines:
        if norm is None:
            norm = mcolors.Normalize(color.min(), color.max())
        cmap = cm._ensure_cmap(cmap)

    streamlines = []
    arrows = []
    for t in trajectories:
        tgx, tgy, tgz = t.T
        # Rescale from grid-coordinates to data-coordinates.
        tx, ty, tz = dmap.grid2data(tgx, tgy, tgz)
        tx += grid.x_origin
        ty += grid.y_origin
        tz += grid.z_origin

        # Create multiple tiny segments if varying width or color is given
        if isinstance(linewidth, np.ndarray) or use_multicolor_lines:
            points = np.transpose([tx, ty, tz]).reshape(-1, 1, 3)
            streamlines.extend(np.hstack([points[:-1], points[1:]]))
        else:
            points = np.transpose([tx, ty, tz])
            streamlines.append(points)

        # Add arrows halfway along each trajectory.
        """
        s = np.cumsum(np.sqrt(np.diff(tx)**2 + np.diff(ty)**2 + np.diff(tz)**2))
        n = np.searchsorted(s, s[-1] / 2.)
        arrow_tail = (tx[n], ty[n], tz[n])
        arrow_head = (np.mean(tx[n:n + 2]), np.mean(ty[n:n + 2]), np.mean(tz[n:n + 2]))
        
        if isinstance(linewidth, np.ndarray):
            line_widths = interpgrid(linewidth, tgx, tgy, tgz)[:-1]
            line_kw['linewidth'].extend(line_widths)
            arrow_kw['linewidth'] = line_widths[n]

        if use_multicolor_lines:
            color_values = interpgrid(color, tgx, tgy, tgz)[:-1]
            line_colors.append(color_values)
            arrow_kw['color'] = cmap(norm(color_values[n]))

        p = FancyArrowPatch3D(arrow_tail, arrow_head, transform=transform, **arrow_kw)
        arrows.append(p)
        """
    lc = Line3DCollection(streamlines, transform=transform, **line_kw)
    lc.sticky_edges.x[:] = [grid.x_origin, grid.x_origin + grid.width]
    lc.sticky_edges.y[:] = [grid.y_origin, grid.y_origin + grid.height]
    if use_multicolor_lines:
        lc.set_array(np.ma.hstack(line_colors))
        lc.set_cmap(cmap)
        lc.set_norm(norm)
    axes.add_collection(lc)

    ac = Patch3DCollection(arrows)
    # Adding the collection itself is broken; see #2341.
    for p in arrows:
        axes.add_patch(p)

    axes.autoscale_view()
    stream_container = StreamplotSet(lc, ac)
    return stream_container


class StreamplotSet:

    def __init__(self, lines, arrows):
        self.lines = lines
        self.arrows = arrows


# Coordinate definitions
# ========================

class DomainMap:
    """
    Map representing different coordinate systems.

    Coordinate definitions:

    * axes-coordinates goes from 0 to 1 in the domain.
    * data-coordinates are specified by the input x-y-z coordinates.
    * grid-coordinates goes from 0 to N, 0 to M and 0 to L for an N x M x L grid,
      where N, M and L match the shape of the input data.
    * mask-coordinates goes from 0 to N, 0 to M and 0 to L for an N x M x L mask,
      where N, M and L are user-specified to control the density of streamlines.

    This class also has methods for adding trajectories to the StreamMask.
    Before adding a trajectory, run `start_trajectory` to keep track of regions
    crossed by a given trajectory. Later, if you decide the trajectory is bad
    (e.g., if the trajectory is very short) just call `undo_trajectory`.
    """

    def __init__(self, grid, mask):
        self.grid = grid
        self.mask = mask
        # Constants for conversion between grid- and mask-coordinates
        self.x_grid2mask = (mask.nx - 1) / (grid.nx - 1)
        self.y_grid2mask = (mask.ny - 1) / (grid.ny - 1)
        self.z_grid2mask = (mask.nz - 1) / (grid.nz - 1)

        self.x_mask2grid = 1. / self.x_grid2mask
        self.y_mask2grid = 1. / self.y_grid2mask
        self.z_mask2grid = 1. / self.z_grid2mask

        self.x_data2grid = 1. / grid.dx
        self.y_data2grid = 1. / grid.dy
        self.z_data2grid = 1. / grid.dz

    def grid2mask(self, xi, yi, zi):
        """Return nearest space in mask-coords from given grid-coords."""
        return round(xi * self.x_grid2mask), round(yi * self.y_grid2mask), round(zi * self.z_grid2mask)

    def mask2grid(self, xm, ym, zm):
        return xm * self.x_mask2grid, ym * self.y_mask2grid, zm * self.z_mask2grid

    def data2grid(self, xd, yd, zd):
        return xd * self.x_data2grid, yd * self.y_data2grid, zd * self.z_data2grid

    def grid2data(self, xg, yg, zg):
        return xg / self.x_data2grid, yg / self.y_data2grid, zg / self.z_data2grid

    def start_trajectory(self, xg, yg, zg, broken_streamlines=True):
        xm, ym, zm = self.grid2mask(xg, yg, zg)
        xm = np.clip(xm, 0, self.mask.nx-1)
        ym = np.clip(xm, 0, self.mask.ny-1)
        zm = np.clip(xm, 0, self.mask.nz-1)
        self.mask._start_trajectory(xm, ym, zm, broken_streamlines)

    def reset_start_point(self, xg, yg, zg):
        xm, ym, zm = self.grid2mask(xg, yg, zg)
        xm = np.clip(xm, 0, self.mask.nx-1)
        ym = np.clip(xm, 0, self.mask.nx-1)
        zm = np.clip(xm, 0, self.mask.nx-1)
        self.mask._current_xyz = (xm, ym, zm)

    def update_trajectory(self, xg, yg, zg, broken_streamlines=True):
        if not self.grid.within_grid(xg, yg, zg):
            raise InvalidIndexError
        xm, ym, zm = self.grid2mask(xg, yg, zg)
        xm = np.clip(xm, 0, self.mask.nx-1)
        ym = np.clip(xm, 0, self.mask.nx-1)
        zm = np.clip(xm, 0, self.mask.nx-1)
        self.mask._update_trajectory(xm, ym, zm, broken_streamlines)

    def undo_trajectory(self):
        self.mask._undo_trajectory()


class Grid:
    """Grid of data."""
    def __init__(self, x, y, z):
        # x, y and z are 3d arrays
        if np.ndim(x) == 1:
            pass
        elif np.ndim(x) == 3:
            xt = np.transpose(x, (0, 2, 1))
            x_row = xt[0, 0]
            if not np.allclose(x_row, xt):
                raise ValueError("The rows of 'x' must be equal")
            x = x_row
        else:
            raise ValueError("'x' can only have 1 or 3 dimensions")

        if np.ndim(y) == 1:
            pass
        elif np.ndim(y) == 3:
            yt = np.transpose(y)
            y_col = yt[0, 0]
            if not np.allclose(y_col, yt):
                raise ValueError("The columns of 'y' must be equal")
            y = y_col
        else:
            raise ValueError("'z' can only have 1 or 3 dimensions")
        
        if np.ndim(z) == 1:
            pass
        elif np.ndim(z) == 3:
            z_col = z[0, 0]
            if not np.allclose(z_col, z):
                raise ValueError("The columns of 'z' must be equal")
            z = z_col
        else:
            raise ValueError("'z' can only have 1 or 3 dimensions")

        if not (np.diff(x) > 0).all():
            raise ValueError("'x' must be strictly increasing")
        if not (np.diff(y) > 0).all():
            raise ValueError("'y' must be strictly increasing")
        if not (np.diff(z) > 0).all():
            raise ValueError("'z' must be strictly increasing")

        self.nx = len(x)
        self.ny = len(y)
        self.nz = len(z)

        self.dx = x[1] - x[0]
        self.dy = y[1] - y[0]
        self.dz = z[1] - z[0]

        self.x_origin = x[0]
        self.y_origin = y[0]
        self.z_origin = y[0]

        self.width = x[-1] - x[0]
        self.height = y[-1] - y[0]
        self.altitude = z[-1] - z[0]

        if not np.allclose(np.diff(x), self.width / (self.nx - 1)):
            raise ValueError("'x' values must be equally spaced")
        if not np.allclose(np.diff(y), self.height / (self.ny - 1)):
            raise ValueError("'y' values must be equally spaced")
        if not np.allclose(np.diff(z), self.altitude / (self.nz - 1)):
            raise ValueError("'z' values must be equally spaced")

    @property
    def shape(self):
        return self.ny, self.nx, self.nz

    def within_grid(self, xi, yi, zi):
        """Return whether (*xi*, *yi*, *zi*) is a valid index of the grid."""
        # Note that xi/yi can be floats; so, for example, we can't simply check
        # `xi < self.nx` since *xi* can be `self.nx - 1 < xi < self.nx`
        return 0 <= xi <= self.nx - 1 and 0 <= yi <= self.ny - 1 and 0 <= zi <= self.nz


class StreamMask2D:
    """
    Mask to keep track of discrete regions crossed by streamlines.

    The resolution of this grid determines the approximate spacing between
    trajectories. Streamlines are only allowed to pass through zeroed cells:
    When a streamline enters a cell, that cell is set to 1, and no new
    streamlines are allowed to enter.
    """

    def __init__(self, density):
        try:
            self.nx, self.ny = (30 * np.broadcast_to(density, 2)).astype(int)
        except ValueError as err:
            raise ValueError("'density' must be a scalar or be of length "
                             "2") from err
        if self.nx < 0 or self.ny < 0:
            raise ValueError("'density' must be positive")
        self._mask = np.zeros((self.ny, self.nx))
        self.shape = self._mask.shape

        self._current_xy = None

    def __getitem__(self, args):
        return self._mask[args]

    def _start_trajectory(self, xm, ym, broken_streamlines=True):
        """Start recording streamline trajectory"""
        self._traj = []
        self._update_trajectory(xm, ym, broken_streamlines)

    def _undo_trajectory(self):
        """Remove current trajectory from mask"""
        for t in self._traj:
            self._mask[t] = 0

    def _update_trajectory(self, xm, ym, broken_streamlines=True):
        """
        Update current trajectory position in mask.

        If the new position has already been filled, raise `InvalidIndexError`.
        """
        if self._current_xy != (xm, ym):
            if self[ym, xm] == 0:
                self._traj.append((ym, xm))
                self._mask[ym, xm] = 1
                self._current_xy = (xm, ym)
            else:
                if broken_streamlines:
                    raise InvalidIndexError
                else:
                    pass


class StreamMask:
    """
    Mask to keep track of discrete regions crossed by streamlines.

    The resolution of this grid determines the approximate spacing between
    trajectories. Streamlines are only allowed to pass through zeroed cells:
    When a streamline enters a cell, that cell is set to 1, and no new
    streamlines are allowed to enter.
    """

    def __init__(self, density):
        try:
            self.nx, self.ny, self.nz = (30 * np.broadcast_to(density, 3)).astype(int)
        except ValueError as err:
            raise ValueError("'density' must be a scalar or be of length "
                             "3") from err
        if self.nx < 0 or self.ny < 0 or self.nz < 0:
            raise ValueError("'density' must be positive")
        self._mask = np.zeros((self.ny, self.nx, self.nz))
        self.shape = self._mask.shape

        self._current_xyz = None

    def __getitem__(self, args):
        return self._mask[args]

    def _start_trajectory(self, xm, ym, zm, broken_streamlines=True):
        """Start recording streamline trajectory"""
        self._traj = []
        self._update_trajectory(xm, ym, zm, broken_streamlines)

    def _undo_trajectory(self):
        """Remove current trajectory from mask"""
        for t in self._traj:
            self._mask[t] = 0

    def _update_trajectory(self, xm, ym, zm, broken_streamlines=True):
        """
        Update current trajectory position in mask.

        If the new position has already been filled, raise `InvalidIndexError`.
        """
        if self._current_xyz != (xm, ym, zm):
            if self[ym, xm, zm] == 0:
                self._traj.append((ym, xm, zm))
                self._mask[ym, xm, zm] = 1
                self._current_xyz = (xm, ym, zm)
            else:
                if broken_streamlines:
                    raise InvalidIndexError
                else:
                    pass


class FancyArrowPatch3D(patches.FancyArrowPatch):
    def __init__(self, posA, posB, *args, **kwargs):
        patches.FancyArrowPatch.__init__(self, (0, 0), (0, 0), *args, **kwargs)
        self._verts3d = posB[0]-posA[0], posB[1]-posA[1], posB[2]-posA[2]

    def draw(self, renderer):
        xs3d, ys3d, zs3d = self._verts3d
        xs, ys, zs = proj3d.proj_transform(xs3d, ys3d, zs3d, renderer.M)
        self.set_positions((xs[0], ys[0]), (xs[1], ys[1]))
        patches.FancyArrowPatch.draw(self, renderer)


class InvalidIndexError(Exception):
    pass


class TerminateTrajectory(Exception):
    pass


# Integrator definitions
# =======================

def _get_integrator(u, v, w, dmap, minlength, maxlength, integration_direction):

    # rescale velocity onto grid-coordinates for integrations.
    u, v, w = dmap.data2grid(u, v, w)

    # speed (path length) will be in axes-coordinates
    u_ax = u / (dmap.grid.nx - 1)
    v_ax = v / (dmap.grid.ny - 1)
    w_ax = w / (dmap.grid.nz - 1)
    speed = np.ma.sqrt(u_ax ** 2 + v_ax ** 2 + w_ax ** 2)

    def forward_time(xi, yi, zi):
        if not dmap.grid.within_grid(xi, yi, zi):
            raise OutOfBounds
        ds_dt = interpgrid(speed, xi, yi, zi)
        if ds_dt == 0:
            raise TerminateTrajectory()
        dt_ds = 1. / ds_dt
        ui = interpgrid(u, xi, yi, zi)
        vi = interpgrid(v, xi, yi, zi)
        wi = interpgrid(w, xi, yi, zi)
        return ui * dt_ds, vi * dt_ds, wi * dt_ds

    def backward_time(xi, yi, zi):
        dxi, dyi, dzi = forward_time(xi, yi, zi)
        return -dxi, -dyi, -dzi

    def integrate(x0, y0, z0, broken_streamlines=True):
        """
        Return x, y, z grid-coordinates of trajectory based on starting point.

        Integrate both forward and backward in time from starting point in
        grid coordinates.

        Integration is terminated when a trajectory reaches a domain boundary
        or when it crosses into an already occupied cell in the StreamMask. The
        resulting trajectory is None if it is shorter than `minlength`.
        """

        stotal, xyz_traj = 0., []

        try:
            dmap.start_trajectory(x0, y0, z0, broken_streamlines)
        except InvalidIndexError:
            return None
        if integration_direction in ['both', 'backward']:
            s, xyzt = _integrate_rk12(x0, y0, z0, dmap, backward_time, maxlength,
                                     broken_streamlines)
            stotal += s
            xyz_traj += xyzt[::-1]

        if integration_direction in ['both', 'forward']:
            dmap.reset_start_point(x0, y0, z0)
            s, xyzt = _integrate_rk12(x0, y0, z0, dmap, forward_time, maxlength,
                                      broken_streamlines)
            stotal += s
            xyz_traj += xyzt[1:]
        if stotal > minlength:
            return np.broadcast_arrays(xyz_traj, np.empty((1, 3)))[0]
        else:  # reject short trajectories
            dmap.undo_trajectory()
            return None

    return integrate


class OutOfBounds(IndexError):
    pass


def _integrate_rk12(x0, y0, z0, dmap, f, maxlength, broken_streamlines=True):
    """
    2nd-order Runge-Kutta algorithm with adaptive step size.

    This method is also referred to as the improved Euler's method, or Heun's
    method. This method is favored over higher-order methods because:

    1. To get decent looking trajectories and to sample every mask cell
       on the trajectory we need a small timestep, so a lower order
       solver doesn't hurt us unless the data is *very* high resolution.
       In fact, for cases where the user inputs
       data smaller or of similar grid size to the mask grid, the higher
       order corrections are negligible because of the very fast linear
       interpolation used in `interpgrid`.

    2. For high resolution input data (i.e. beyond the mask
       resolution), we must reduce the timestep. Therefore, an adaptive
       timestep is more suited to the problem as this would be very hard
       to judge automatically otherwise.

    This integrator is about 1.5 - 2x as fast as RK4 and RK45 solvers (using
    similar Python implementations) in most setups.
    """
    # This error is below that needed to match the RK4 integrator. It
    # is set for visual reasons -- too low and corners start
    # appearing ugly and jagged. Can be tuned.
    maxerror = 0.003

    # This limit is important (for all integrators) to avoid the
    # trajectory skipping some mask cells. We could relax this
    # condition if we use the code which is commented out below to
    # increment the location gradually. However, due to the efficient
    # nature of the interpolation, this doesn't boost speed by much
    # for quite a bit of complexity.
    maxds = min(1. / dmap.mask.nx, 1. / dmap.mask.ny, 1. / dmap.mask.nz, 0.1)

    ds = maxds
    stotal = 0
    xi = x0
    yi = y0
    zi = z0
    xyzf_traj = []

    count = 0
    while True:
        try:
            if dmap.grid.within_grid(xi, yi, zi):
                xyzf_traj.append((xi, yi, zi))
            else:
                raise OutOfBounds

            # Compute the two intermediate gradients.
            # f should raise OutOfBounds if the locations given are
            # outside the grid.
            k1x, k1y, k1z = f(xi, yi, zi)
            k2x, k2y, k2z = f(xi + ds * k1x, yi + ds * k1y, zi + ds * k1z)
            count += 1

        except OutOfBounds:
            # Out of the domain during this step.
            # Take an Euler step to the boundary to improve neatness
            # unless the trajectory is currently empty.
            if xyzf_traj:
                ds, xyzf_traj = _euler_step(xyzf_traj, dmap, f)
                stotal += ds
            break
        except TerminateTrajectory:
            break

        dx1 = ds * k1x
        dy1 = ds * k1y
        dz1 = ds * k1z
        dx2 = ds * 0.5 * (k1x + k2x)
        dy2 = ds * 0.5 * (k1y + k2y)
        dz2 = ds * 0.5 * (k1z + k2z)

        ny, nx, nz = dmap.grid.shape
        # Error is normalized to the axes coordinates
        error = np.sqrt(((dx2 - dx1) / (nx - 1))**2 + ((dy2 - dy1) / (ny - 1))**2 + ((dz2 - dz1) / (nz - 1))**2)

        # Only save step if within error tolerance
        if error < maxerror:
            xi += dx2
            yi += dy2
            zi += dz2
            try:
                dmap.update_trajectory(xi, yi, zi, broken_streamlines)
            except InvalidIndexError:
                break
            if stotal + ds > maxlength:
                break
            stotal += ds

        # recalculate stepsize based on step error
        if error == 0:
            ds = maxds
        else:
            ds = min(maxds, 0.85 * ds * (maxerror / error) ** 0.5)
    print(x0, y0, z0, count)
    return stotal, xyzf_traj


def _euler_step(xyzf_traj, dmap, f):
    """Simple Euler integration step that extends streamline to boundary."""
    ny, nx, nz = dmap.grid.shape
    xi, yi, zi = xyzf_traj[-1]
    cx, cy, cz = f(xi, yi, zi)
    if cx == 0:
        dsx = np.inf
    elif cx < 0:
        dsx = xi / -cx
    else:
        dsx = (nx - 1 - xi) / cx
    if cy == 0:
        dsy = np.inf
    elif cy < 0:
        dsy = yi / -cy
    else:
        dsy = (ny - 1 - yi) / cy
    if cz == 0:
        dsz = np.inf
    elif cz < 0:
        dsz = zi / -cz
    else:
        dsz = (nz - 1 - zi) / cz
    ds = min(dsx, dsy)
    xyzf_traj.append((xi + cx * ds, yi + cy * ds, zi + cz * ds))
    return ds, xyzf_traj


# Utility functions
# ========================

def interpgrid(a, xi, yi, zi):
    """Fast 2D, linear interpolation on an integer grid"""

    Ny, Nx, Nz = np.shape(a)
    if isinstance(xi, np.ndarray):
        x = xi.astype(int)
        y = yi.astype(int)
        z = zi.astype(int)
        # Check that xn, yn don't exceed max index
        xn = np.clip(x + 1, 0, Nx - 1)
        yn = np.clip(y + 1, 0, Ny - 1)
        zn = np.clip(z + 1, 0, Nz - 1)
    else:
        x = int(xi)
        y = int(yi)
        z = int(zi)
        # conditional is faster than clipping for integers
        if x == (Nx - 1):
            xn = x
        else:
            xn = x + 1
        if y == (Ny - 1):
            yn = y
        else:
            yn = y + 1
        if z == (Nz - 1):
            zn = z
        else:
            zn = z + 1

    a000 = a[y, x, z]
    a001 = a[y, xn, z]
    a010 = a[yn, x, z]
    a011 = a[yn, xn, z]
    a100 = a[y, x, zn]
    a101 = a[y, xn, zn]
    a110 = a[yn, x, zn]
    a111 = a[yn, xn, zn]
    xt = xi - x
    yt = yi - y
    zt = zi - z
    a00 = a000 * (1 - xt) + a001 * xt
    a01 = a010 * (1 - xt) + a011 * xt
    a0 = a00 * (1 - yt) + a01 * yt
    a10 = a100 * (1 - xt) + a101 * xt
    a11 = a110 * (1 - xt) + a111 * xt
    a1 = a10 * (1 - yt) + a11 * yt
    ai = a0 * (1 - zt) + a1 * zt

    if not isinstance(xi, np.ndarray):
        if np.ma.is_masked(ai):
            raise TerminateTrajectory

    return ai


def _gen_starting_points(shape):
    """
    Yield starting points for streamlines.

    Trying points on the boundary first gives higher quality streamlines.
    This algorithm starts with a point on the mask corner and spirals inward.
    This algorithm is inefficient, but fast compared to rest of streamplot.
    """
    ny, nx, nz = shape
    xfirst = 0
    yfirst = 1
    xlast = nx - 1
    ylast = ny - 1
    x, y = 0, 0
    direction = 'right'
    for z in range(nz-1):
        for j in range(nx * ny):
            yield x, y, z

            if direction == 'right':
                x += 1
                if x >= xlast:
                    xlast -= 1
                    direction = 'up'
            elif direction == 'up':
                y += 1
                if y >= ylast:
                    ylast -= 1
                    direction = 'left'
            elif direction == 'left':
                x -= 1
                if x <= xfirst:
                    xfirst += 1
                    direction = 'down'
            elif direction == 'down':
                y -= 1
                if y <= yfirst:
                    yfirst += 1
                    direction = 'right'